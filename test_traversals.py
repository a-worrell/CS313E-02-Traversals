"""
Traversals Test Suite, with functionality
to test individual functions and test cases"""

import sys
import unittest
from traversals import (
    row_major_traversal,
    column_major_traversal,
    row_zigzag_traversal,
    column_zigzag_traversal,
    main_diagonal_traversal,
    secondary_diagonal_traversal,
    spiral_traversal,
)


class TestRowTraversal(unittest.TestCase):
    """Row Traversal Test Suite (8 Tests)"""

    def test_row_major_traversal_3x5(self):
        "Row Major Traversal: 3x5 grid"
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]

        actual = row_major_traversal(grid_3x5)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
        ]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_5x3(self):
        "Row Major Traversal: 5x3 grid"
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]

        actual = row_major_traversal(grid_5x3)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (1, 0),
            (1, 1),
            (1, 2),
            (2, 0),
            (2, 1),
            (2, 2),
            (3, 0),
            (3, 1),
            (3, 2),
            (4, 0),
            (4, 1),
            (4, 2),
        ]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_5x5(self):
        "Row Major Traversal: 5x5 grid"
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]

        actual = row_major_traversal(grid_5x5)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (3, 0),
            (3, 1),
            (3, 2),
            (3, 3),
            (3, 4),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
        ]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_10x10(self):
        "Row Major Traversal: 10x10 grid"
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]

        actual = row_major_traversal(grid_10x10)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (0, 8),
            (0, 9),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (1, 6),
            (1, 7),
            (1, 8),
            (1, 9),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (2, 7),
            (2, 8),
            (2, 9),
            (3, 0),
            (3, 1),
            (3, 2),
            (3, 3),
            (3, 4),
            (3, 5),
            (3, 6),
            (3, 7),
            (3, 8),
            (3, 9),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (4, 6),
            (4, 7),
            (4, 8),
            (4, 9),
            (5, 0),
            (5, 1),
            (5, 2),
            (5, 3),
            (5, 4),
            (5, 5),
            (5, 6),
            (5, 7),
            (5, 8),
            (5, 9),
            (6, 0),
            (6, 1),
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (6, 6),
            (6, 7),
            (6, 8),
            (6, 9),
            (7, 0),
            (7, 1),
            (7, 2),
            (7, 3),
            (7, 4),
            (7, 5),
            (7, 6),
            (7, 7),
            (7, 8),
            (7, 9),
            (8, 0),
            (8, 1),
            (8, 2),
            (8, 3),
            (8, 4),
            (8, 5),
            (8, 6),
            (8, 7),
            (8, 8),
            (8, 9),
            (9, 0),
            (9, 1),
            (9, 2),
            (9, 3),
            (9, 4),
            (9, 5),
            (9, 6),
            (9, 7),
            (9, 8),
            (9, 9),
        ]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_1x1(self):
        "Row Major Traversal: 1x1 grid"
        grid_1x1 = [[1]]

        actual = row_major_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_7x7(self):
        "Row Major Traversal: 7x7 grid"
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]

        actual = row_major_traversal(grid_7x7)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (1, 6),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (3, 0),
            (3, 1),
            (3, 2),
            (3, 3),
            (3, 4),
            (3, 5),
            (3, 6),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (4, 6),
            (5, 0),
            (5, 1),
            (5, 2),
            (5, 3),
            (5, 4),
            (5, 5),
            (5, 6),
            (6, 0),
            (6, 1),
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (6, 6),
        ]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_8x6(self):
        "Row Major Traversal: 8x6 grid"
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]

        actual = row_major_traversal(grid_8x6)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (3, 0),
            (3, 1),
            (3, 2),
            (3, 3),
            (3, 4),
            (3, 5),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (5, 0),
            (5, 1),
            (5, 2),
            (5, 3),
            (5, 4),
            (5, 5),
            (6, 0),
            (6, 1),
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (7, 0),
            (7, 1),
            (7, 2),
            (7, 3),
            (7, 4),
            (7, 5),
        ]
        self.assertEqual(actual, expected)

    def test_row_major_traversal_6x8(self):
        "Row Major Traversal: 6x8 grid"
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]

        actual = row_major_traversal(grid_6x8)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (1, 6),
            (1, 7),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (2, 7),
            (3, 0),
            (3, 1),
            (3, 2),
            (3, 3),
            (3, 4),
            (3, 5),
            (3, 6),
            (3, 7),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (4, 6),
            (4, 7),
            (5, 0),
            (5, 1),
            (5, 2),
            (5, 3),
            (5, 4),
            (5, 5),
            (5, 6),
            (5, 7),
        ]
        self.assertEqual(actual, expected)


class TestColumnTraversal(unittest.TestCase):
    """Column Traversal Test Suite (8 Tests)"""

    def test_column_major_traversal_3x5(self):
        "Column Major Traversal: 3x5 grid"
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]

        actual = column_major_traversal(grid_3x5)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (0, 3),
            (1, 3),
            (2, 3),
            (0, 4),
            (1, 4),
            (2, 4),
        ]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_5x3(self):
        "Column Major Traversal: 5x3 grid"
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]

        actual = column_major_traversal(grid_5x3)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
        ]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_5x5(self):
        "Column Major Traversal: 5x5 grid"
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]

        actual = column_major_traversal(grid_5x5)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (0, 3),
            (1, 3),
            (2, 3),
            (3, 3),
            (4, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
        ]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_10x10(self):
        "Column Major Traversal: 10x10 grid"
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]

        actual = column_major_traversal(grid_10x10)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (5, 1),
            (6, 1),
            (7, 1),
            (8, 1),
            (9, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (7, 2),
            (8, 2),
            (9, 2),
            (0, 3),
            (1, 3),
            (2, 3),
            (3, 3),
            (4, 3),
            (5, 3),
            (6, 3),
            (7, 3),
            (8, 3),
            (9, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (7, 4),
            (8, 4),
            (9, 4),
            (0, 5),
            (1, 5),
            (2, 5),
            (3, 5),
            (4, 5),
            (5, 5),
            (6, 5),
            (7, 5),
            (8, 5),
            (9, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (6, 6),
            (7, 6),
            (8, 6),
            (9, 6),
            (0, 7),
            (1, 7),
            (2, 7),
            (3, 7),
            (4, 7),
            (5, 7),
            (6, 7),
            (7, 7),
            (8, 7),
            (9, 7),
            (0, 8),
            (1, 8),
            (2, 8),
            (3, 8),
            (4, 8),
            (5, 8),
            (6, 8),
            (7, 8),
            (8, 8),
            (9, 8),
            (0, 9),
            (1, 9),
            (2, 9),
            (3, 9),
            (4, 9),
            (5, 9),
            (6, 9),
            (7, 9),
            (8, 9),
            (9, 9),
        ]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_1x1(self):
        "Column Major Traversal: 1x1 grid"
        grid_1x1 = [[1]]

        actual = column_major_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_7x7(self):
        "Column Major Traversal: 7x7 grid"
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]

        actual = column_major_traversal(grid_7x7)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (5, 1),
            (6, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (0, 3),
            (1, 3),
            (2, 3),
            (3, 3),
            (4, 3),
            (5, 3),
            (6, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (0, 5),
            (1, 5),
            (2, 5),
            (3, 5),
            (4, 5),
            (5, 5),
            (6, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (6, 6),
        ]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_8x6(self):
        "Column Major Traversal: 8x6 grid"
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]

        actual = column_major_traversal(grid_8x6)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (7, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (5, 1),
            (6, 1),
            (7, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (7, 2),
            (0, 3),
            (1, 3),
            (2, 3),
            (3, 3),
            (4, 3),
            (5, 3),
            (6, 3),
            (7, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (7, 4),
            (0, 5),
            (1, 5),
            (2, 5),
            (3, 5),
            (4, 5),
            (5, 5),
            (6, 5),
            (7, 5),
        ]
        self.assertEqual(actual, expected)

    def test_column_major_traversal_6x8(self):
        "Column Major Traversal: 6x8 grid"
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]

        actual = column_major_traversal(grid_6x8)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (0, 1),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (5, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (0, 3),
            (1, 3),
            (2, 3),
            (3, 3),
            (4, 3),
            (5, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (0, 5),
            (1, 5),
            (2, 5),
            (3, 5),
            (4, 5),
            (5, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (0, 7),
            (1, 7),
            (2, 7),
            (3, 7),
            (4, 7),
            (5, 7),
        ]
        self.assertEqual(actual, expected)


class TestRowZigZagTraversal(unittest.TestCase):
    """Row ZigZag Traversal Test Suite (8 Tests)"""

    def test_row_zigzag_traversal_3x5(self):
        """Row Zigzag Traversal: 3x5 grid"""
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]

        actual = row_zigzag_traversal(grid_3x5)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 4),
            (1, 3),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
        ]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_5x3(self):
        """Row Zigzag Traversal: 5x3 grid"""
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]

        actual = row_zigzag_traversal(grid_5x3)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (3, 2),
            (3, 1),
            (3, 0),
            (4, 0),
            (4, 1),
            (4, 2),
        ]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_5x5(self):
        """Row Zigzag Traversal: 5x5 grid"""
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]

        actual = row_zigzag_traversal(grid_5x5)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 4),
            (1, 3),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (3, 4),
            (3, 3),
            (3, 2),
            (3, 1),
            (3, 0),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
        ]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_10x10(self):
        """Row Zigzag Traversal: 10x10 grid"""
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]

        actual = row_zigzag_traversal(grid_10x10)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (0, 8),
            (0, 9),
            (1, 9),
            (1, 8),
            (1, 7),
            (1, 6),
            (1, 5),
            (1, 4),
            (1, 3),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (2, 7),
            (2, 8),
            (2, 9),
            (3, 9),
            (3, 8),
            (3, 7),
            (3, 6),
            (3, 5),
            (3, 4),
            (3, 3),
            (3, 2),
            (3, 1),
            (3, 0),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (4, 6),
            (4, 7),
            (4, 8),
            (4, 9),
            (5, 9),
            (5, 8),
            (5, 7),
            (5, 6),
            (5, 5),
            (5, 4),
            (5, 3),
            (5, 2),
            (5, 1),
            (5, 0),
            (6, 0),
            (6, 1),
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (6, 6),
            (6, 7),
            (6, 8),
            (6, 9),
            (7, 9),
            (7, 8),
            (7, 7),
            (7, 6),
            (7, 5),
            (7, 4),
            (7, 3),
            (7, 2),
            (7, 1),
            (7, 0),
            (8, 0),
            (8, 1),
            (8, 2),
            (8, 3),
            (8, 4),
            (8, 5),
            (8, 6),
            (8, 7),
            (8, 8),
            (8, 9),
            (9, 9),
            (9, 8),
            (9, 7),
            (9, 6),
            (9, 5),
            (9, 4),
            (9, 3),
            (9, 2),
            (9, 1),
            (9, 0),
        ]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_1x1(self):
        """Row Zigzag Traversal: 1x1 grid"""
        grid_1x1 = [[1]]

        actual = row_zigzag_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_7x7(self):
        """Row Zigzag Traversal: 7x7 grid"""
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]

        actual = row_zigzag_traversal(grid_7x7)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (1, 6),
            (1, 5),
            (1, 4),
            (1, 3),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (3, 6),
            (3, 5),
            (3, 4),
            (3, 3),
            (3, 2),
            (3, 1),
            (3, 0),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (4, 6),
            (5, 6),
            (5, 5),
            (5, 4),
            (5, 3),
            (5, 2),
            (5, 1),
            (5, 0),
            (6, 0),
            (6, 1),
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (6, 6),
        ]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_8x6(self):
        """Row Zigzag Traversal: 8x6 grid"""
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]

        actual = row_zigzag_traversal(grid_8x6)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (1, 5),
            (1, 4),
            (1, 3),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (3, 5),
            (3, 4),
            (3, 3),
            (3, 2),
            (3, 1),
            (3, 0),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (5, 5),
            (5, 4),
            (5, 3),
            (5, 2),
            (5, 1),
            (5, 0),
            (6, 0),
            (6, 1),
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (7, 5),
            (7, 4),
            (7, 3),
            (7, 2),
            (7, 1),
            (7, 0),
        ]
        self.assertEqual(actual, expected)

    def test_row_zigzag_traversal_6x8(self):
        """Row Zigzag Traversal: 6x8 grid"""
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]

        actual = row_zigzag_traversal(grid_6x8)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (1, 7),
            (1, 6),
            (1, 5),
            (1, 4),
            (1, 3),
            (1, 2),
            (1, 1),
            (1, 0),
            (2, 0),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (2, 7),
            (3, 7),
            (3, 6),
            (3, 5),
            (3, 4),
            (3, 3),
            (3, 2),
            (3, 1),
            (3, 0),
            (4, 0),
            (4, 1),
            (4, 2),
            (4, 3),
            (4, 4),
            (4, 5),
            (4, 6),
            (4, 7),
            (5, 7),
            (5, 6),
            (5, 5),
            (5, 4),
            (5, 3),
            (5, 2),
            (5, 1),
            (5, 0),
        ]
        self.assertEqual(actual, expected)


class TestColumnZigZagTraversal(unittest.TestCase):
    """Column ZigZag Test Suite (8 Tests)"""

    def test_column_zigzag_traversal_3x5(self):
        """Column Zigzag Traversal: 3x5 grid"""
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]

        actual = column_zigzag_traversal(grid_3x5)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (2, 3),
            (1, 3),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
        ]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_5x3(self):
        """Column Zigzag Traversal: 5x3 grid"""
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]

        actual = column_zigzag_traversal(grid_5x3)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (4, 1),
            (3, 1),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
        ]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_5x5(self):
        """Column Zigzag Traversal: 5x5 grid"""
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]

        actual = column_zigzag_traversal(grid_5x5)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (4, 1),
            (3, 1),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (4, 3),
            (3, 3),
            (2, 3),
            (1, 3),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
        ]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_10x10(self):
        """Column Zigzag Traversal: 10x10 grid"""
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]

        actual = column_zigzag_traversal(grid_10x10)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (7, 0),
            (8, 0),
            (9, 0),
            (9, 1),
            (8, 1),
            (7, 1),
            (6, 1),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (7, 2),
            (8, 2),
            (9, 2),
            (9, 3),
            (8, 3),
            (7, 3),
            (6, 3),
            (5, 3),
            (4, 3),
            (3, 3),
            (2, 3),
            (1, 3),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (7, 4),
            (8, 4),
            (9, 4),
            (9, 5),
            (8, 5),
            (7, 5),
            (6, 5),
            (5, 5),
            (4, 5),
            (3, 5),
            (2, 5),
            (1, 5),
            (0, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (6, 6),
            (7, 6),
            (8, 6),
            (9, 6),
            (9, 7),
            (8, 7),
            (7, 7),
            (6, 7),
            (5, 7),
            (4, 7),
            (3, 7),
            (2, 7),
            (1, 7),
            (0, 7),
            (0, 8),
            (1, 8),
            (2, 8),
            (3, 8),
            (4, 8),
            (5, 8),
            (6, 8),
            (7, 8),
            (8, 8),
            (9, 8),
            (9, 9),
            (8, 9),
            (7, 9),
            (6, 9),
            (5, 9),
            (4, 9),
            (3, 9),
            (2, 9),
            (1, 9),
            (0, 9),
        ]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_1x1(self):
        """Column Zigzag Traversal: 1x1 grid"""
        grid_1x1 = [[1]]

        actual = column_zigzag_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_7x7(self):
        """Column Zigzag Traversal: 7x7 grid"""
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]

        actual = column_zigzag_traversal(grid_7x7)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (6, 1),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (6, 3),
            (5, 3),
            (4, 3),
            (3, 3),
            (2, 3),
            (1, 3),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (6, 5),
            (5, 5),
            (4, 5),
            (3, 5),
            (2, 5),
            (1, 5),
            (0, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (6, 6),
        ]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_8x6(self):
        """Column Zigzag Traversal: 8x6 grid"""
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]

        actual = column_zigzag_traversal(grid_8x6)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (7, 0),
            (7, 1),
            (6, 1),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (7, 2),
            (7, 3),
            (6, 3),
            (5, 3),
            (4, 3),
            (3, 3),
            (2, 3),
            (1, 3),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (7, 4),
            (7, 5),
            (6, 5),
            (5, 5),
            (4, 5),
            (3, 5),
            (2, 5),
            (1, 5),
            (0, 5),
        ]
        self.assertEqual(actual, expected)

    def test_column_zigzag_traversal_6x8(self):
        """Column Zigzag Traversal: 6x8 grid"""
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]

        actual = column_zigzag_traversal(grid_6x8)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (1, 1),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (5, 3),
            (4, 3),
            (3, 3),
            (2, 3),
            (1, 3),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (5, 5),
            (4, 5),
            (3, 5),
            (2, 5),
            (1, 5),
            (0, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (5, 7),
            (4, 7),
            (3, 7),
            (2, 7),
            (1, 7),
            (0, 7),
        ]
        self.assertEqual(actual, expected)


class TestMainDiagonalTraversal(unittest.TestCase):
    """Main Diagonal Traversal Test Suite (8 Tests)"""

    def test_main_diagonal_traversal_3x5(self):
        """Main Diagonal Traversal: 3x5 grid"""
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]
        actual = main_diagonal_traversal(grid_3x5)
        expected = [
            (0, 4),
            (0, 3),
            (1, 4),
            (0, 2),
            (1, 3),
            (2, 4),
            (0, 1),
            (1, 2),
            (2, 3),
            (0, 0),
            (1, 1),
            (2, 2),
            (1, 0),
            (2, 1),
            (2, 0),
        ]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_5x3(self):
        """Main Diagonal Traversal: 5x3 grid"""
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]
        actual = main_diagonal_traversal(grid_5x3)
        expected = [
            (0, 2),
            (0, 1),
            (1, 2),
            (0, 0),
            (1, 1),
            (2, 2),
            (1, 0),
            (2, 1),
            (3, 2),
            (2, 0),
            (3, 1),
            (4, 2),
            (3, 0),
            (4, 1),
            (4, 0),
        ]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_5x5(self):
        """Main Diagonal Traversal: 5x5 grid"""
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]
        actual = main_diagonal_traversal(grid_5x5)
        expected = [
            (0, 4),
            (0, 3),
            (1, 4),
            (0, 2),
            (1, 3),
            (2, 4),
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (1, 0),
            (2, 1),
            (3, 2),
            (4, 3),
            (2, 0),
            (3, 1),
            (4, 2),
            (3, 0),
            (4, 1),
            (4, 0),
        ]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_10x10(self):
        """Main Diagonal Traversal: 10x10 grid"""
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]
        actual = main_diagonal_traversal(grid_10x10)
        expected = [
            (0, 9),
            (0, 8),
            (1, 9),
            (0, 7),
            (1, 8),
            (2, 9),
            (0, 6),
            (1, 7),
            (2, 8),
            (3, 9),
            (0, 5),
            (1, 6),
            (2, 7),
            (3, 8),
            (4, 9),
            (0, 4),
            (1, 5),
            (2, 6),
            (3, 7),
            (4, 8),
            (5, 9),
            (0, 3),
            (1, 4),
            (2, 5),
            (3, 6),
            (4, 7),
            (5, 8),
            (6, 9),
            (0, 2),
            (1, 3),
            (2, 4),
            (3, 5),
            (4, 6),
            (5, 7),
            (6, 8),
            (7, 9),
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            (5, 6),
            (6, 7),
            (7, 8),
            (8, 9),
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (6, 6),
            (7, 7),
            (8, 8),
            (9, 9),
            (1, 0),
            (2, 1),
            (3, 2),
            (4, 3),
            (5, 4),
            (6, 5),
            (7, 6),
            (8, 7),
            (9, 8),
            (2, 0),
            (3, 1),
            (4, 2),
            (5, 3),
            (6, 4),
            (7, 5),
            (8, 6),
            (9, 7),
            (3, 0),
            (4, 1),
            (5, 2),
            (6, 3),
            (7, 4),
            (8, 5),
            (9, 6),
            (4, 0),
            (5, 1),
            (6, 2),
            (7, 3),
            (8, 4),
            (9, 5),
            (5, 0),
            (6, 1),
            (7, 2),
            (8, 3),
            (9, 4),
            (6, 0),
            (7, 1),
            (8, 2),
            (9, 3),
            (7, 0),
            (8, 1),
            (9, 2),
            (8, 0),
            (9, 1),
            (9, 0),
        ]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_1x1(self):
        """Main Diagonal Traversal: 1x1 grid"""
        grid_1x1 = [[1]]
        actual = main_diagonal_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_7x7(self):
        """Main Diagonal Traversal: 7x7 grid"""
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]
        actual = main_diagonal_traversal(grid_7x7)
        expected = [
            (0, 6),
            (0, 5),
            (1, 6),
            (0, 4),
            (1, 5),
            (2, 6),
            (0, 3),
            (1, 4),
            (2, 5),
            (3, 6),
            (0, 2),
            (1, 3),
            (2, 4),
            (3, 5),
            (4, 6),
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            (5, 6),
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (6, 6),
            (1, 0),
            (2, 1),
            (3, 2),
            (4, 3),
            (5, 4),
            (6, 5),
            (2, 0),
            (3, 1),
            (4, 2),
            (5, 3),
            (6, 4),
            (3, 0),
            (4, 1),
            (5, 2),
            (6, 3),
            (4, 0),
            (5, 1),
            (6, 2),
            (5, 0),
            (6, 1),
            (6, 0),
        ]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_8x6(self):
        """Main Diagonal Traversal: 8x6 grid"""
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]
        actual = main_diagonal_traversal(grid_8x6)
        expected = [
            (0, 5),
            (0, 4),
            (1, 5),
            (0, 3),
            (1, 4),
            (2, 5),
            (0, 2),
            (1, 3),
            (2, 4),
            (3, 5),
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (1, 0),
            (2, 1),
            (3, 2),
            (4, 3),
            (5, 4),
            (6, 5),
            (2, 0),
            (3, 1),
            (4, 2),
            (5, 3),
            (6, 4),
            (7, 5),
            (3, 0),
            (4, 1),
            (5, 2),
            (6, 3),
            (7, 4),
            (4, 0),
            (5, 1),
            (6, 2),
            (7, 3),
            (5, 0),
            (6, 1),
            (7, 2),
            (6, 0),
            (7, 1),
            (7, 0),
        ]
        self.assertEqual(actual, expected)

    def test_main_diagonal_traversal_6x8(self):
        """Main Diagonal Traversal: 6x8 grid"""
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]
        actual = main_diagonal_traversal(grid_6x8)
        expected = [
            (0, 7),
            (0, 6),
            (1, 7),
            (0, 5),
            (1, 6),
            (2, 7),
            (0, 4),
            (1, 5),
            (2, 6),
            (3, 7),
            (0, 3),
            (1, 4),
            (2, 5),
            (3, 6),
            (4, 7),
            (0, 2),
            (1, 3),
            (2, 4),
            (3, 5),
            (4, 6),
            (5, 7),
            (0, 1),
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            (5, 6),
            (0, 0),
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (1, 0),
            (2, 1),
            (3, 2),
            (4, 3),
            (5, 4),
            (2, 0),
            (3, 1),
            (4, 2),
            (5, 3),
            (3, 0),
            (4, 1),
            (5, 2),
            (4, 0),
            (5, 1),
            (5, 0),
        ]
        self.assertEqual(actual, expected)


class TestSecondaryDiagonalTraversal(unittest.TestCase):
    """Secondary Diagonal Traversal Test Suite (8 Tests)"""

    def test_secondary_diagonal_traversal_3x5(self):
        """Secondary Diagonal Traversal: 3x5 grid"""
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]
        actual = secondary_diagonal_traversal(grid_3x5)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (0, 3),
            (1, 2),
            (2, 1),
            (0, 4),
            (1, 3),
            (2, 2),
            (1, 4),
            (2, 3),
            (2, 4),
        ]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_5x3(self):
        """Secondary Diagonal Traversal: 5x3 grid"""
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]
        actual = secondary_diagonal_traversal(grid_5x3)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (1, 2),
            (2, 1),
            (3, 0),
            (2, 2),
            (3, 1),
            (4, 0),
            (3, 2),
            (4, 1),
            (4, 2),
        ]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_5x5(self):
        """Secondary Diagonal Traversal: 5x5 grid"""
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]
        actual = secondary_diagonal_traversal(grid_5x5)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (0, 3),
            (1, 2),
            (2, 1),
            (3, 0),
            (0, 4),
            (1, 3),
            (2, 2),
            (3, 1),
            (4, 0),
            (1, 4),
            (2, 3),
            (3, 2),
            (4, 1),
            (2, 4),
            (3, 3),
            (4, 2),
            (3, 4),
            (4, 3),
            (4, 4),
        ]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_10x10(self):
        """Secondary Diagonal Traversal: 10x10 grid"""
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]
        actual = secondary_diagonal_traversal(grid_10x10)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (0, 3),
            (1, 2),
            (2, 1),
            (3, 0),
            (0, 4),
            (1, 3),
            (2, 2),
            (3, 1),
            (4, 0),
            (0, 5),
            (1, 4),
            (2, 3),
            (3, 2),
            (4, 1),
            (5, 0),
            (0, 6),
            (1, 5),
            (2, 4),
            (3, 3),
            (4, 2),
            (5, 1),
            (6, 0),
            (0, 7),
            (1, 6),
            (2, 5),
            (3, 4),
            (4, 3),
            (5, 2),
            (6, 1),
            (7, 0),
            (0, 8),
            (1, 7),
            (2, 6),
            (3, 5),
            (4, 4),
            (5, 3),
            (6, 2),
            (7, 1),
            (8, 0),
            (0, 9),
            (1, 8),
            (2, 7),
            (3, 6),
            (4, 5),
            (5, 4),
            (6, 3),
            (7, 2),
            (8, 1),
            (9, 0),
            (1, 9),
            (2, 8),
            (3, 7),
            (4, 6),
            (5, 5),
            (6, 4),
            (7, 3),
            (8, 2),
            (9, 1),
            (2, 9),
            (3, 8),
            (4, 7),
            (5, 6),
            (6, 5),
            (7, 4),
            (8, 3),
            (9, 2),
            (3, 9),
            (4, 8),
            (5, 7),
            (6, 6),
            (7, 5),
            (8, 4),
            (9, 3),
            (4, 9),
            (5, 8),
            (6, 7),
            (7, 6),
            (8, 5),
            (9, 4),
            (5, 9),
            (6, 8),
            (7, 7),
            (8, 6),
            (9, 5),
            (6, 9),
            (7, 8),
            (8, 7),
            (9, 6),
            (7, 9),
            (8, 8),
            (9, 7),
            (8, 9),
            (9, 8),
            (9, 9),
        ]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_1x1(self):
        """Secondary Diagonal Traversal: 1x1 grid"""
        grid_1x1 = [[1]]
        actual = secondary_diagonal_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_7x7(self):
        """Secondary Diagonal Traversal: 7x7 grid"""
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]
        actual = secondary_diagonal_traversal(grid_7x7)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (0, 3),
            (1, 2),
            (2, 1),
            (3, 0),
            (0, 4),
            (1, 3),
            (2, 2),
            (3, 1),
            (4, 0),
            (0, 5),
            (1, 4),
            (2, 3),
            (3, 2),
            (4, 1),
            (5, 0),
            (0, 6),
            (1, 5),
            (2, 4),
            (3, 3),
            (4, 2),
            (5, 1),
            (6, 0),
            (1, 6),
            (2, 5),
            (3, 4),
            (4, 3),
            (5, 2),
            (6, 1),
            (2, 6),
            (3, 5),
            (4, 4),
            (5, 3),
            (6, 2),
            (3, 6),
            (4, 5),
            (5, 4),
            (6, 3),
            (4, 6),
            (5, 5),
            (6, 4),
            (5, 6),
            (6, 5),
            (6, 6),
        ]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_8x6(self):
        """Secondary Diagonal Traversal: 8x6 grid"""
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]
        actual = secondary_diagonal_traversal(grid_8x6)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (0, 3),
            (1, 2),
            (2, 1),
            (3, 0),
            (0, 4),
            (1, 3),
            (2, 2),
            (3, 1),
            (4, 0),
            (0, 5),
            (1, 4),
            (2, 3),
            (3, 2),
            (4, 1),
            (5, 0),
            (1, 5),
            (2, 4),
            (3, 3),
            (4, 2),
            (5, 1),
            (6, 0),
            (2, 5),
            (3, 4),
            (4, 3),
            (5, 2),
            (6, 1),
            (7, 0),
            (3, 5),
            (4, 4),
            (5, 3),
            (6, 2),
            (7, 1),
            (4, 5),
            (5, 4),
            (6, 3),
            (7, 2),
            (5, 5),
            (6, 4),
            (7, 3),
            (6, 5),
            (7, 4),
            (7, 5),
        ]
        self.assertEqual(actual, expected)

    def test_secondary_diagonal_traversal_6x8(self):
        """Secondary Diagonal Traversal: 6x8 grid"""
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]
        actual = secondary_diagonal_traversal(grid_6x8)
        expected = [
            (0, 0),
            (0, 1),
            (1, 0),
            (0, 2),
            (1, 1),
            (2, 0),
            (0, 3),
            (1, 2),
            (2, 1),
            (3, 0),
            (0, 4),
            (1, 3),
            (2, 2),
            (3, 1),
            (4, 0),
            (0, 5),
            (1, 4),
            (2, 3),
            (3, 2),
            (4, 1),
            (5, 0),
            (0, 6),
            (1, 5),
            (2, 4),
            (3, 3),
            (4, 2),
            (5, 1),
            (0, 7),
            (1, 6),
            (2, 5),
            (3, 4),
            (4, 3),
            (5, 2),
            (1, 7),
            (2, 6),
            (3, 5),
            (4, 4),
            (5, 3),
            (2, 7),
            (3, 6),
            (4, 5),
            (5, 4),
            (3, 7),
            (4, 6),
            (5, 5),
            (4, 7),
            (5, 6),
            (5, 7),
        ]
        self.assertEqual(actual, expected)


class TestSpiralTraversal(unittest.TestCase):
    """Spiral Traversal Test Suite (12 Tests)"""

    def test_spiral_traversal_3x5(self):
        """Spiral Traversal: 3x5 grid"""
        grid_3x5 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]
        actual = spiral_traversal(grid_3x5)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (2, 3),
            (2, 2),
            (2, 1),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_5x3(self):
        """Spiral Traversal: 5x3 grid"""
        grid_5x3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]
        actual = spiral_traversal(grid_5x3)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (4, 1),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (2, 1),
            (3, 1),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_5x5(self):
        """Spiral Traversal: 5x5 grid"""
        grid_5x5 = [
            [1, 2, 3, 4, 5],
            [6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15],
            [16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25],
        ]
        actual = spiral_traversal(grid_5x5)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (4, 3),
            (4, 2),
            (4, 1),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (2, 3),
            (3, 3),
            (3, 2),
            (3, 1),
            (2, 1),
            (2, 2),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_10x10(self):
        """Spiral Traversal: 10x10 grid"""
        grid_10x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
            [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
            [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
            [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
            [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
        ]
        actual = spiral_traversal(grid_10x10)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (0, 8),
            (0, 9),
            (1, 9),
            (2, 9),
            (3, 9),
            (4, 9),
            (5, 9),
            (6, 9),
            (7, 9),
            (8, 9),
            (9, 9),
            (9, 8),
            (9, 7),
            (9, 6),
            (9, 5),
            (9, 4),
            (9, 3),
            (9, 2),
            (9, 1),
            (9, 0),
            (8, 0),
            (7, 0),
            (6, 0),
            (5, 0),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (1, 6),
            (1, 7),
            (1, 8),
            (2, 8),
            (3, 8),
            (4, 8),
            (5, 8),
            (6, 8),
            (7, 8),
            (8, 8),
            (8, 7),
            (8, 6),
            (8, 5),
            (8, 4),
            (8, 3),
            (8, 2),
            (8, 1),
            (7, 1),
            (6, 1),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (2, 6),
            (2, 7),
            (3, 7),
            (4, 7),
            (5, 7),
            (6, 7),
            (7, 7),
            (7, 6),
            (7, 5),
            (7, 4),
            (7, 3),
            (7, 2),
            (6, 2),
            (5, 2),
            (4, 2),
            (3, 2),
            (3, 3),
            (3, 4),
            (3, 5),
            (3, 6),
            (4, 6),
            (5, 6),
            (6, 6),
            (6, 5),
            (6, 4),
            (6, 3),
            (5, 3),
            (4, 3),
            (4, 4),
            (4, 5),
            (5, 5),
            (5, 4),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_1x1(self):
        """Spiral Traversal: 1x1 grid"""
        grid_1x1 = [[1]]
        actual = spiral_traversal(grid_1x1)
        expected = [(0, 0)]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_7x7(self):
        """Spiral Traversal: 7x7 grid"""
        grid_7x7 = [
            [1, 2, 3, 4, 5, 6, 7],
            [8, 9, 10, 11, 12, 13, 14],
            [15, 16, 17, 18, 19, 20, 21],
            [22, 23, 24, 25, 26, 27, 28],
            [29, 30, 31, 32, 33, 34, 35],
            [36, 37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48, 49],
        ]
        actual = spiral_traversal(grid_7x7)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (5, 6),
            (6, 6),
            (6, 5),
            (6, 4),
            (6, 3),
            (6, 2),
            (6, 1),
            (6, 0),
            (5, 0),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (2, 5),
            (3, 5),
            (4, 5),
            (5, 5),
            (5, 4),
            (5, 3),
            (5, 2),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (3, 4),
            (4, 4),
            (4, 3),
            (4, 2),
            (3, 2),
            (3, 3),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_8x6(self):
        """Spiral Traversal: 8x6 grid"""
        grid_8x6 = [
            [1, 2, 3, 4, 5, 6],
            [7, 8, 9, 10, 11, 12],
            [13, 14, 15, 16, 17, 18],
            [19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30],
            [31, 32, 33, 34, 35, 36],
            [37, 38, 39, 40, 41, 42],
            [43, 44, 45, 46, 47, 48],
        ]
        actual = spiral_traversal(grid_8x6)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (1, 5),
            (2, 5),
            (3, 5),
            (4, 5),
            (5, 5),
            (6, 5),
            (7, 5),
            (7, 4),
            (7, 3),
            (7, 2),
            (7, 1),
            (7, 0),
            (6, 0),
            (5, 0),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (6, 3),
            (6, 2),
            (6, 1),
            (5, 1),
            (4, 1),
            (3, 1),
            (2, 1),
            (2, 2),
            (2, 3),
            (3, 3),
            (4, 3),
            (5, 3),
            (5, 2),
            (4, 2),
            (3, 2),
        ]

        self.assertEqual(actual, expected)

    def test_spiral_traversal_6x8(self):
        """Spiral Traversal: 6x8 grid"""
        grid_6x8 = [
            [1, 2, 3, 4, 5, 6, 7, 8],
            [9, 10, 11, 12, 13, 14, 15, 16],
            [17, 18, 19, 20, 21, 22, 23, 24],
            [25, 26, 27, 28, 29, 30, 31, 32],
            [33, 34, 35, 36, 37, 38, 39, 40],
            [41, 42, 43, 44, 45, 46, 47, 48],
        ]
        actual = spiral_traversal(grid_6x8)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (1, 7),
            (2, 7),
            (3, 7),
            (4, 7),
            (5, 7),
            (5, 6),
            (5, 5),
            (5, 4),
            (5, 3),
            (5, 2),
            (5, 1),
            (5, 0),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (1, 6),
            (2, 6),
            (3, 6),
            (4, 6),
            (4, 5),
            (4, 4),
            (4, 3),
            (4, 2),
            (4, 1),
            (3, 1),
            (2, 1),
            (2, 2),
            (2, 3),
            (2, 4),
            (2, 5),
            (3, 5),
            (3, 4),
            (3, 3),
            (3, 2),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_3x10(self):
        """Spiral Traversal: 3x10 grid"""
        grid_3x10 = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
        ]

        actual = spiral_traversal(grid_3x10)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (0, 8),
            (0, 9),
            (1, 9),
            (2, 9),
            (2, 8),
            (2, 7),
            (2, 6),
            (2, 5),
            (2, 4),
            (2, 3),
            (2, 2),
            (2, 1),
            (2, 0),
            (1, 0),
            (1, 1),
            (1, 2),
            (1, 3),
            (1, 4),
            (1, 5),
            (1, 6),
            (1, 7),
            (1, 8),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_10x3(self):
        """Spiral Traversal: 10x3 grid"""
        grid_10x3 = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [10, 11, 12],
            [13, 14, 15],
            [16, 17, 18],
            [19, 20, 21],
            [22, 23, 24],
            [25, 26, 27],
            [28, 29, 30],
        ]

        actual = spiral_traversal(grid_10x3)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (1, 2),
            (2, 2),
            (3, 2),
            (4, 2),
            (5, 2),
            (6, 2),
            (7, 2),
            (8, 2),
            (9, 2),
            (9, 1),
            (9, 0),
            (8, 0),
            (7, 0),
            (6, 0),
            (5, 0),
            (4, 0),
            (3, 0),
            (2, 0),
            (1, 0),
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 1),
            (5, 1),
            (6, 1),
            (7, 1),
            (8, 1),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_1x9(self):
        """Spiral Traversal: 1x9 grid"""
        grid_1x9 = [[1, 2, 3, 4, 5, 6, 7, 8, 9]]

        actual = spiral_traversal(grid_1x9)
        expected = [
            (0, 0),
            (0, 1),
            (0, 2),
            (0, 3),
            (0, 4),
            (0, 5),
            (0, 6),
            (0, 7),
            (0, 8),
        ]
        self.assertEqual(actual, expected)

    def test_spiral_traversal_9x1(self):
        """Spiral Traversal: 9x1 grid"""
        grid_9x1 = [[1], [2], [3], [4], [5], [6], [7], [8], [9]]

        actual = spiral_traversal(grid_9x1)
        expected = [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (6, 0),
            (7, 0),
            (8, 0),
        ]
        self.assertEqual(actual, expected)


def main():
    """Main function to run tests based on command-line arguments."""
    # Mapping of test names to test case classes
    test_cases = {
        "row": TestRowTraversal,
        "column": TestColumnTraversal,
        "row_zigzag": TestRowZigZagTraversal,
        "column_zigzag": TestColumnZigZagTraversal,
        "main": TestMainDiagonalTraversal,
        "secondary": TestSecondaryDiagonalTraversal,
        "spiral": TestSpiralTraversal,
    }

    # If no arguments are provided, run all tests
    usage_string = (
        "Invalid use of Traversal Tester. Arguments should be "
        "[test abbreviated name] [grid dimensions]. "
        """An example would be:

python3 test_traversals.py row 5x5

"""
        f"Valid test name options are: {', '.join(test_cases.keys())}\n"
        f"Valid grids are: 3x5, 5x3, 5x5, 10x10, 1x1, 7x7, 8x6, 6x8"
    )
    if len(sys.argv) > 3:
        print(usage_string)
        return
    if len(sys.argv) == 1:
        unittest.main()
        return
    sys.argv = sys.argv[1:]
    test_name = sys.argv[0]
    if test_name not in test_cases:
        print(
            f"Invalid test name: {test_name}. Valid options are: {', '.join(test_cases.keys())}"
        )
        return
    if len(sys.argv) == 1:
        # Extract test case based on the first command-line argument
        suite = unittest.TestLoader().loadTestsFromTestCase(test_cases[test_name])
    else:
        grid_dimensions = sys.argv[1]
        loader = unittest.TestLoader()

        # Load all tests from the test case class
        all_tests = loader.loadTestsFromTestCase(test_cases[test_name])
        suite = unittest.TestSuite()
        # Filter tests that end with 'success'
        for test in all_tests:
            if test.id().split(".")[-1].endswith(grid_dimensions):
                suite.addTest(test)
        if not suite.countTestCases():
            print(usage_string)
            return
    unittest.TextTestRunner().run(suite)


if __name__ == "__main__":
    main()